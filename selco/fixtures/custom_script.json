[
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Issue", 
  "modified": "2017-10-28 12:38:35.366811", 
  "name": "Issue-Client", 
  "script": "/*To set naming series when branch is choosen for the first time */\ncur_frm.add_fetch(\"branch\", \"customer_complaint_naming_series\", \"naming_series\");\ncur_frm.add_fetch(\"service_area\", \"selco_cse_service_area\", \"selco_service_area_name\");\n\n\n/*To set Branch eMail ID when branch is choosen for the first time */\ncur_frm.add_fetch(\"branch\", \"selco_branch_email_id\", \"selco_branch_email_id\");\ncur_frm.add_fetch(\"branch\", \"selco_service_branch_email_id\", \"selco_service_branch_email_id\");\n\n\n/*To set naming series when the value in branch is changed*/\nfrappe.ui.form.on(\"Issue\", \"selco_branch\",\n    function(frm) {\ncur_frm.add_fetch(\"selco_branch\", \"customer_complaint_naming_series\", \"naming_series\");\n\nif ( cur_frm.doc.naming_series == null )\n{\nwindow.location.reload();\nmsgprint(\"Please set the correct naming series for the branch.\");\n       throw \"Not allowed\";\n}\n})\n\ncur_frm.add_fetch(\"selco_customer_name\", \"selco_customer_contact_number\", \"selco_customer_contact_number\");\ncur_frm.add_fetch(\"selco_customer_name\", \"selco_customer_name\", \"selco_customer_full_name\");\ncur_frm.add_fetch(\"selco_complaint_handled_by\", \"selco_service_person_name\", \"selco_service_person_name\");\n\n/*To 'Make Fields Read Only' once the workflow state changes to anything other than 'Complaint Drafted'*/\nfrappe.ui.form.on(\"Issue\", \"refresh\",\n    function(frm) {\nif ( cur_frm.doc.selco_workflow_state == \"Complaint Open\" || cur_frm.doc.selco_workflow_state == \"Complaint Assigned To CSE\" || cur_frm.doc.selco_workflow_state == \"Complaint Cancelled\" || cur_frm.doc.selco_workflow_state == \"Complaint Attended By CSE - Still Open\" || cur_frm.doc.selco_workflow_state == \"Complaint Escalated To SBM\" || cur_frm.doc.selco_workflow_state == \"Complaint Closed By Branch\" || cur_frm.doc.selco_workflow_state == \"Complaint Closed By CSD\" || cur_frm.doc.selco_workflow_state == \"Warranty Claim Format Raised - WC\" || cur_frm.doc.selco_workflow_state == \"Dispatch Pending From Godown\" || cur_frm.doc.selco_workflow_state == \"Dispatched From Godown\")\n{\nfrm.set_df_property(\"date\", \"read_only\",1);\nfrm.set_df_property(\"selco_branch\", \"read_only\",1);\nfrm.set_df_property(\"subject\", \"read_only\",1);\nfrm.set_df_property(\"selco_description_of_complaint\", \"read_only\",1);\nfrm.set_df_property(\"selco_customer_name\", \"read_only\",1);\nfrm.set_df_property(\"selco_customer_full_name\", \"read_only\",1);\n\nfrm.set_df_property(\"selco_customer_contact_number\", \"read_only\",1);\n//frm.set_df_property(\"selco_customer_address\", \"read_only\",1);\nfrm.set_df_property(\"selco_complaint_priority\", \"read_only\",1);\nfrm.set_df_property(\"selco_warranty_applicable\", \"read_only\",1);\nfrm.set_df_property(\"selco_type_of_system\", \"read_only\",1);\nfrm.set_df_property(\"selco_capacity\", \"read_only\",1);\n}\n})\n\n/*To 'Make Fields Read Only' once the workflow state changes to 'closed by branch' or 'closed by CSD'*/\nfrappe.ui.form.on(\"Issue\", \"refresh\",\n    function(frm) {\nif ( cur_frm.doc.selco_workflow_state == \"Complaint Closed By CSD\" || cur_frm.doc.selco_workflow_state == \"Complaint Closed By Branch\" || cur_frm.doc.selco_workflow_state == \"Dispatch Pending From Godown\")\n{\nfrm.set_df_property(\"selco_ics_number\", \"read_only\",1);\nfrm.set_df_property(\"selco_category_of_complaint\", \"read_only\",1);\nfrm.set_df_property(\"selco_faulty_component\", \"read_only\",1);\nfrm.set_df_property(\"selco_service_record_number\", \"read_only\",1);\nfrm.set_df_property(\"selco_branch_remarks\", \"read_only\",1);\nfrm.set_df_property(\"selco_sbm_name_if_involved\", \"read_only\",1);\n\nfrm.set_df_property(\"selco_ics_date\", \"read_only\",1);\nfrm.set_df_property(\"selco_complaint_handled_by\", \"read_only\",1);\nfrm.set_df_property(\"selco_component_vendor\", \"read_only\",1);\nfrm.set_df_property(\"selco_record_date\", \"read_only\",1);\nfrm.set_df_property(\"selco_service_charges_collected\", \"read_only\",1);\nfrm.set_df_property(\"selco_sbm_remarks\", \"read_only\",1);\n}\n})\n\nfrappe.ui.form.on(\"Issue\", \"selco-customer_name\", function(frm) {\n    cur_frm.set_query(\"selco_customer_address\", function() {\n        return {\n            \"filters\": {\n                \"customer\": frm.doc.selco_customer_name\n            }\n        };\n    });\n});\n\nfrappe.ui.form.on(\"Issue\", \"selco_customer_address\", function(frm, cdt, cdn) {\n        return frm.call({\n            method: \"erpnext.utilities.doctype.address.address.get_address_display\",\n            args: {\n                \"address_dict\": frm.doc.selco_customer_address\n            },\n            callback: function(r) {\n            if(r.message) {\n           /*  console.log(r.message);*/                  \n             frappe.model.set_value(cdt,cdn,\"detail_address\", r.message);\n            /* $(frm.fields_dict.detail_address.wrapper).html(r.message) */  }\n        }\n        });\n    \n})\n\nfrappe.ui.form.on(\"Issue\", \"refresh\", function (frm, cdt, cdn) {\n  cur_frm.set_query(\"selco_customer_name\", function () {\n    return {\n      query: \"erpnext.controllers.queries.customer_query\",\n      searchfield: \"selco_customer_contact_number\"\n    }\n  });\n});\n\nfrappe.ui.form.on(\"Issue\", \"refresh\", function (frm, cdt, cdn) {\n  cur_frm.set_query(\"selco_customer_name\", function () {\n    return {\n      query: \"erpnext.controllers.queries.customer_query\",\n      searchfield: \"selco_landline_mobile_2\"\n    }\n  });\n});\n\n\n\n\nfrappe.ui.form.on(\"Issue\", \"refresh\",\n    function(frm) {\nif ( cur_frm.doc.selco_workflow_state == \"Complaint Closed By CSD\" || cur_frm.doc.selco_workflow_state == \"Complaint Rejected By CSD\" )\n{\nfrm.set_df_property(\"selco_remarks\", \"read_only\",1);\nfrm.set_df_property(\"selco_special_budget\", \"read_only\",1);\n}\n})\n\n\nfrappe.ui.form.on(\"Issue\", \"validate\", function(frm, cdt, cdn) {\ncur_frm.doc.selco_sms_number = cur_frm.doc.selco_customer_contact_number + \"@sms.textlocal.in\";\n})\n\nfrappe.ui.form.on(\"Issue\", \"validate\", function(frm) {\nif ( cur_frm.doc.selco_workflow_state == \"Complaint Drafted\" )\n{\nif ( cur_frm.doc.naming_series == \"ISS-\" )\n{\n        msgprint(\"Complaint is not saved.Please select the branch again!!\");\n        validated = false;\n}\n}\n})\n\nfrappe.ui.form.on(\"Issue\", \"validate\",\n    function(frm) {\nif ( cur_frm.doc.selco_workflow_state == \"Complaint Closed By Branch\" )\n{\ncur_frm.doc.selco_sms_counter_1 = cur_frm.doc.selco_sms_counter_1 +1 ;\n}\n})\n\n\n\n\n\n\n\n\n\n\n\n\nfrappe.ui.form.on(\"Issue\", \"refresh\", function(frm) {\ncur_frm.fields_dict.selco_customer_name.new_doc = quick_entry_customer;\ncur_frm.fields_dict.selco_customer_address.new_doc = quick_entry_address;\n})\n\n\n\nquick_entry_address = function(){\nconsole.log(\"Overrided\");\n    frappe._from_link = this;\n    quick_entry(\"Address\",\n    function(){},\n    {\n        \"address_type\": \"Billing\",\n                \"branch\": cur_frm.doc.selco_branch,\n                \"customer\": cur_frm.doc.selco_customer_name,\n                \"country\" : \"India\"\n    });\n}\n\nquick_entry_customer = function(){\nconsole.log(\"Overrided\");\n    frappe._from_link = this;\n    quick_entry(\"Customer\",\n    function(){},\n    {\n                \"branch\": cur_frm.doc.selco_branch\n    });\n}\n\n\n/* cur_frm.fields_dict.Service Record Details Issue.grid.toggle_reqd\n    (\"reason_for_not_collecting_the_amount\", doc.selco_service_amount=0)\n\nfrappe.ui.form.on('Service Record Details Issue', {\n    reason_for_not_collecting_the_amount_add: function(frm) {\nconsole.log(\"Clicked on amount\");\n    }\n});\n\n\nfrappe.ui.form.on(\"Service Record Details Issue\", \"service_amount\", function(frm, cdt, cdn){\n    console.log(\"Clicked on amount\");\n cur_frm.fields_dict.service_record_details.grid.toggle_reqd\n    (\"reason_for_not_collecting_the_amount\", 1)\n\n})*/\n\n/*\nfrappe.ui.form.on(\"Issue\", \"validate\", function(frm, cdt, cdn) {\n    for (i = 0; i < cur_frm.doc.service_record_details.length; i++) {\n        if (cur_frm.doc.selco_service_record_details[i].service_amount == 0 && !cur_frm.doc.selco_service_record_details[i].reason_for_not_collecting_the_amount) {\n            frappe.throw(\"Please enter the reason for not collecting amount\");\n        }\n    }\n}) */\n\n\nfrappe.ui.form.on(\"Issue\", \"refresh\", function(frm) {\n   {\nvar workflow_states = ['Complaint Open','Complaint Assigned To CSE','Complaint Escalated To SBM']\nif (workflow_states.indexOf(cur_frm.doc.workflow_state) != -1)\n{\n      cur_frm.add_custom_button(__(\"Raise Warranty Claim\"),\n        cur_frm.cscript.raise_Warranty_Claim);\n    }\n}\n})\n\ncur_frm.cscript.raise_Warranty_Claim = function()\n{\nfrappe.route_options = {\n\"complaint_number\": cur_frm.doc.name\n};\nfrappe.new_doc(\"Warranty Claim\");\n}\n\n\n\n\n\n\n\n\n\nquick_entry = function(doctype, success, fields_map={}) {\n    frappe.model.with_doctype(doctype, function() {\n        var mandatory = [];\n\n        if (!fields_map == {}) {\n            $.each(fields_map, function(k,v) {\n                doc_field = frappe.meta.get_docfield(doctype, k)\n                mandatory.push(doc_field);\n            });\n        } else {\n            mandatory = $.map(frappe.get_meta(doctype).fields,\n            function(d) { return (d.reqd || d.bold && !d.read_only) ? d : null });\n        }\n\n        var meta = frappe.get_meta(doctype);\n        var doc = frappe.model.get_new_doc(doctype, null, null, true);\n\n        /*if(meta.quick_entry != 1) {\n            var d = frappe.model.make_new_doc_and_get_name(doctype);\n            d = locals[doctype][d];\n            $.each(fields_map, function(fieldname, fieldvalue) {\n                d[fieldname] = fieldvalue;\n            });\n            frappe.set_route('Form', doctype, d.name);\n            return;\n        }*/\n\n        var dialog = new frappe.ui.Dialog({\n            title: __(\"New {0}\", [doctype]),\n            fields: mandatory,\n        });\n\n        var update_doc = function() {\n            var data = dialog.get_values(true);\n            $.each(data, function(key, value) {\n                if(key==='__name') {\n                    dialog.doc.name = value;\n                } else {\n                    if(!is_null(value)) {\n                        dialog.doc[key] = value;\n                    }\n                }\n            });\n            return dialog.doc;\n        }\n\n        var open_doc = function() {\n            dialog.hide();\n            update_doc();\n            frappe.set_route('Form', doctype, doc.name);\n        }\n\n        dialog.doc = doc;\n\n        // refresh dependencies etc\n        dialog.refresh();\n\n        dialog.set_primary_action(__('Save'), function() {\n            if(dialog.working) return;\n            var data = dialog.get_values();\n\n            if(data) {\n                dialog.working = true;\n                values = update_doc();\n                frappe.call({\n                    method: \"frappe.client.insert\",\n                    args: {\n                        doc: values\n                    },\n                    callback: function(r) {\n                        dialog.hide();\n                        // delete the old doc\n                        frappe.model.clear_doc(dialog.doc.doctype, dialog.doc.name);\n                        var doc = r.message;\n                        if(success) {\n                            success(doc);\n                        }\n                        frappe.ui.form.update_calling_link(doc.name);\n                    },\n                    error: function() {\n                        open_doc();\n                    },\n                    always: function() {\n                        dialog.working = false;\n                    },\n                    freeze: true\n                });\n            }\n        });\n\n        var $link = $('<div class=\"text-muted small\" style=\"padding-left: 10px; padding-top: 15px;\">\\\n            Ctrl+enter to save | <a class=\"edit-full\">Edit in full page</a></div>').appendTo(dialog.body);\n\n        $link.find('.edit-full').on('click', function() {\n            // edit in form\n            open_doc();\n        });\n\n        // ctrl+enter to save\n        dialog.wrapper.keydown(function(e) {\n            if((e.ctrlKey || e.metaKey) && e.which==13) {\n                if(!frappe.request.ajax_count) {\n                    // not already working -- double entry\n                    dialog.get_primary_btn().trigger(\"click\");\n                }\n            }\n        });\n\n        dialog.show();\n\n        //Set value and visibility if field map exists.\n        if (fields_map != {}) {\n            $.each(dialog.fields_dict, function(fieldname, field) {\n                field.set_input(fields_map[fieldname]);\n            });\n        } else {\n            // set defaults\n            $.each(dialog.fields_dict, function(fieldname, field) {\n                field.doctype = doc.doctype;\n                field.docname = doc.name;\n                if(!is_null(doc[fieldname])) {\n                    field.set_input(doc[fieldname]);\n                }\n            });\n        }\n    });\n}\n\t", 
  "script_type": "Client"
 }
]